## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("hgu133a.db")
library(hug133a.db)
library(hgu133a.db)
version()
version
version
version
source("https://bioconductor.org/biocLite.R")
biocLite("hgu133a.db")
library(hgu133a.db)
hgu133aSYMBOL
a <- hgu133aSYMBOL
source("https://bioconductor.org/biocLite.R")
biocLite("DeMAND")
library(DeMAND)
biocLite("DeMAND")
source("https://bioconductor.org/biocLite.R")
biocLite("clusterProfiler")
library(clusterProfiler)
biocLite("clusterProfiler")
library(clusterProfiler)
library("clusterProfiler")
biocLite("DOSE")
library(DOSE)
library(clusterProfiler)
require(clusterProfiler)
source("https://bioconductor.org/biocLite.R")
library(clusterProfiler)
library(DOSE)
biocLite("clusterProfiler")
.libPaths()
source("https://bioconductor.org/biocLite.R")
biocLite("clusterProfiler")
biocLite("clusterProfiler")
library(clusterProfiler)
setwd("~/R/SINCERITIES")
library(R.matlab)
mat <- readMat('In silico single cell data/20_nets_10genes_10UNEVENtime_sigma01B_no_initial_points2.mat')
readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
mat <- readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
mat$time.points
as.vector(mat$time.points)
time <- as.vector(mat$time.points)
numGENES <- mat$n
numGENES <- as.vector(mat$n)
dim(mat$networks)[3]
dim(mat$data.tot.array[[1]])
mat$data.tot.array[[1]]
t <- mat$data.tot.array[[1]]
t[1]
t <- mat$data.tot.array[[[1]]]
t <- mat$data.tot.array[[1]]
length(t)
t[[1]]
s <- t[[1]]
dim(s)
t <- mat$data.tot.array[[[[1]]]]
t <- mat$data.tot.array[[1]][[1]]
rm(s)
rm(t)
data_time_series <- mat$data.tot.array[[2]][[1]]
d=data_time_series[,1,]
View(d)
data_time_series <- mat$data.tot.array[[1]][[1]]
d=data_time_series[,1,]
View(d)
l=list()
list[[1]]=d
l[[1]]=d
l[[2]]=d
numEXAMPLES=1
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[[i]] <- sprintf('Gene %d',i)
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
genes
totDATA <- matrix()
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
totDATA <- matrix()
for (i in 1:mat$num.time.points) {
totDATA <- cbind(totDATA,data_time_series[,i,])
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
View(totDATA)
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES.R")
result <- SINCERITITES(DATA,distance=1,method = 1,noDIAG = 1,SIGN = SIGN)
a <- mat$networks[,,numEXAMPLES]
View(a)
View(a)
a[row(a)==col(a)] <- 0
View(a)
which(a!=0)
a[which(a!=0)] <- 1
View(a)
View(a)
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
View(a)
adj_matrix <- result$adj_matrix
adj_matrix <- adj_matrix/max(adj_matrix)
View(adj_matrix)
sum(adj_matrix)
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
library(pracma)
auc_from_ranks_TC_sign <- dget("auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUROC <- []
AUROC <- vector()
AUPR <- vector()
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
View(table)
time <- as.vector(mat$time.points)
numGENES <- as.vector(mat$n)
AUROC <- vector()
AUPR <- vector()
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
#Parameter settings
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES.R")
result <- SINCERITITES(DATA,distance=1,method = 1,noDIAG = 1,SIGN = SIGN)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
warnings()
AUROC
AUPR
AUC <- c(AUROC,AUPR)
AUC <- cbind(AUROC,AUPR)
View(AUC)
apply(AUC,2,mean)
apply(AUC,2,std)
mean <- apply(AUC,2,mean)
std <- appy(AUC,2,std)
m <- apply(AUC,2,mean)
s <- appy(AUC,2,std)
s <- apply(AUC,2,std)
AUC <- rbind(AUC,rbind(m,s))
View(AUC)
setwd("~/Downloads/SINCERITIES-R/SINCERITIES functions")
filename <- file.choose()
df <- read.csv(filename,header=header)
header=TRUE
df <- read.csv(filename,header=header)
View(df)
View(df)
df[1,2]=NA
df[13,20]=NA
is.na(df)
is.na(df,1)
is.na(df)
sum(df,1)
apply(df,sum,1)
apply(df,1,sum)
apply(df,2,sum)
apply(df,1,sum)
NAIdx = is.na(apply(df,1,sum))
df = df[!NAIdx,]
