adj_matrix <- result$adj_matrix/max(result$adj_matrix)
View(adj_matrix)
sum(adj_matrix)
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=1,saveFile = TRUE)
View(table)
genes = DATA$genes
numGENES = DATA$numGENES
sourceGENES <- as.vector(replicate(numGENES,genes))
targetGENES <- as.vector(t(replicate(numGENES,genes)))
final_ranked_predictions <- dget("SINCERITIES functions/final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=1,saveFile = TRUE)
View(table)
####################
# PACKAGES required:
# kSamples
# glmnet
# ppcor
# pracma
# R.matlab
####################
library(kSamples)
library(glmnet)
library(ppcor)
library(R.matlab)
## *** Data loading ***
mat <- readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
time <- as.vector(mat$time.points)
numGENES <- as.vector(mat$n)
AUROC <- vector()
AUPR <- vector()
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
#Parameter settings
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES.R")
result <- SINCERITITES(DATA,distance=4,method = 1,noDIAG = 1,SIGN = SIGN)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
AUC <- cbind(AUROC,AUPR)
m <- apply(AUC,2,mean)
s <- apply(AUC,2,std)
AUC <- rbind(AUC,rbind(m,s))
mat <- readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
time <- as.vector(mat$time.points)
numGENES <- as.vector(mat$n)
AUROC <- vector()
AUPR <- vector()
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
#Parameter settings
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES.R")
result <- SINCERITITES(DATA,distance=4,method = 1,noDIAG = 1,SIGN = SIGN)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
#Parameter settings
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES functions/SINCERITIES.R")
result <- SINCERITITES(DATA,distance=4,method = 1,noDIAG = 1,SIGN = SIGN)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
####################
# PACKAGES required:
# kSamples
# glmnet
# ppcor
# pracma
# R.matlab
####################
library(kSamples)
library(glmnet)
library(ppcor)
library(R.matlab)
## *** Data loading ***
mat <- readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
time <- as.vector(mat$time.points)
numGENES <- as.vector(mat$n)
AUROC <- vector()
AUPR <- vector()
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
#Parameter settings
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES functions/SINCERITIES.R")
result <- SINCERITITES(DATA,distance=4,method = 1,noDIAG = 1,SIGN = SIGN)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("SINCERITIES functions/auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("SINCERITIES functions/final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
AUC <- cbind(AUROC,AUPR)
m <- apply(AUC,2,mean)
s <- apply(AUC,2,std)
AUC <- rbind(AUC,rbind(m,s))
####################
# PACKAGES required:
# kSamples
# glmnet
# ppcor
# pracma
# R.matlab
####################
library(kSamples)
library(glmnet)
library(ppcor)
library(R.matlab)
## *** Data loading ***
mat <- readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
time <- as.vector(mat$time.points)
numGENES <- as.vector(mat$n)
AUROC <- vector()
AUPR <- vector()
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
#Parameter settings
SIGN <- 1
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES functions/SINCERITIES.R")
result <- SINCERITITES(DATA,distance=4,method = 1,noDIAG = 1,SIGN = SIGN)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("SINCERITIES functions/auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("SINCERITIES functions/final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
AUC <- cbind(AUROC,AUPR)
m <- apply(AUC,2,mean)
s <- apply(AUC,2,std)
AUC <- rbind(AUC,rbind(m,s))
####################
# PACKAGES required:
# kSamples
# glmnet
# ppcor
# pracma
# R.matlab
####################
library(kSamples)
library(glmnet)
library(ppcor)
library(R.matlab)
## *** Data loading ***
mat <- readMat('In silico single cell data/20_nets_10genes_8UNEVENtime_sigma01B_no_initial_points2.mat')
time <- as.vector(mat$time.points)
numGENES <- as.vector(mat$n)
AUROC <- vector()
AUPR <- vector()
for (numEXAMPLES in 1:dim(mat$networks)[3]) {
data_time_series <- mat$data.tot.array[[numEXAMPLES]][[1]]
singleCELLdata <- list()
for (i in 1:mat$num.time.points) {
singleCELLdata[[i]] <- data_time_series[,i,]
}
genes <- vector(length=numGENES)
for (i in 1:numGENES) {
genes[i] <- sprintf('Gene %d',i)
}
totDATA <- matrix(nrow = 0, ncol = dim(data_time_series)[3])
for (i in 1:mat$num.time.points) {
totDATA <- rbind(totDATA,data_time_series[,i,])
}
DATA <- list(time=time, numGENES=numGENES, singleCELLdata=singleCELLdata, genes=genes, totDATA=totDATA)
## *** SINCERITIES ***
library(kSamples)
library(glmnet)
library(ppcor)
SINCERITITES <- dget("SINCERITIES functions/SINCERITIES.R")
result <- SINCERITITES(DATA,distance=1,method = 1,noDIAG = 1,SIGN = 1)
adj_matrix <- result$adj_matrix
## *** Performance Evaluation ***
#Gold standard GRN
a <- mat$networks[,,numEXAMPLES]
a[row(a)==col(a)] <- 0
if(SIGN==0){
a[which(a!=0)] <- 1
}
#Final ranked list, AUROC and AUPR
adj_matrix <- adj_matrix/max(adj_matrix)
library(pracma)
auc_from_ranks_TC_sign <- dget("SINCERITIES functions/auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,a,1000)
AUROC[numEXAMPLES] <- AUCresult$AUROC
AUPR[numEXAMPLES] <- AUCresult$AUPR
final_ranked_predictions <- dget("SINCERITIES functions/final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME=sprintf('results4insilicoNETWORK%d',numEXAMPLES),saveFile = TRUE)
}
AUC <- cbind(AUROC,AUPR)
m <- apply(AUC,2,mean)
s <- apply(AUC,2,std)
AUC <- rbind(AUC,rbind(m,s))
View(table)
View(AUC)
library(glmnet)
library(ppcor)
library(cvTools)
uploading <- dget("SINCERITIES functions/uploading.R")
DATA <- uploading('THP1 data/THP1_single_cell_data_EXCEL_no6_24_72_96.csv')
SINCERITIES_PLUS <- dget("SINCERITIES functions/SINCERITIES_PLUS.R")
result <- SINCERITIES_PLUS(DATA,noDIAG = 0,SIGN = 0,CV_nfolds = 10)
adj_matrix <- result$adj_matrix
subGENES <- as.character(read.csv('THP1 data/SUBNET2_tomaru.csv',header = FALSE)$V1)
idxSUBgenes <- match(subGENES,DATA$genes)
idxSUBgenes <- idxSUBgenes[!is.na(idxSUBgenes)]
DATA$numGENES <- length(idxSUBgenes)
DATA$genes <- DATA$genes[idxSUBgenes]
adj_matrix <- adj_matrix[idxSUBgenes,idxSUBgenes]
for (i in 1:DATA$num_time_points) {
DATA$singleCELLdata[[i]] <- DATA$singleCELLdata[[i]][,idxSUBgenes]
}
DATA$totDATA <- DATA$totDATA[,idxSUBgenes]
tomaru2 <- read.csv('THP1 data/tomaru2.csv', header = FALSE)
type_regulation <- tomaru2[,2]
netINFO <- tomaru2[,-2]
adj_ref <- matrix(0,nrow = DATA$numGENES, ncol = DATA$numGENES)
for (i in 1:dim(netINFO)[1]) {
idxGENEsource <- match(netINFO[i,1],DATA$genes)
if(!is.na(idxGENEsource)){
idxGENEtarget <- match(as.character(t(netINFO[i,-1])),DATA$genes)
idxGENEtarget <- idxGENEtarget[!is.na(idxGENEtarget)]
if(SIGN==1){
adj_ref[idxGENEsource,idxGENEtarget] <- type_regulation[i]
}else{
adj_ref[idxGENEsource,idxGENEtarget] <- 1
}
}
}
tomaruGENES <- sort(unique(as.character(unlist(netINFO))))
NDidx <- match('ND',tomaruGENES)
if(!is.na(NDidx)){
tomaruGENES <- tomaruGENES[-NDidx]
}
# Final ranked list
adj_matrix <- adj_matrix/max(adj_matrix)
final_ranked_predictions <- dget("SINCERITIES functions/final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=SIGN,fileNAME='prediction4THP1',saveFile = TRUE)
# AUROC (x=fpr/1-specifity; y=recall/sensitivity) and AUPR (x=recall y=precision)
# Auto-regulatory edges are removed for AUROC and AUPR evaluation since
# RNAi experiments would not allow the identification of such edges.
adj_matrix[row(adj_matrix)==col(adj_matrix)] <- 0
library(pracma)
auc_from_ranks_TC_sign <- dget("SINCERITIES functions/auc_from_ranks_TC_sign.R")
AUCresult <- auc_from_ranks_TC_sign(adj_matrix,adj_ref,1000)
AUROC <- AUCresult$AUROC
AUPR <- AUCresult$AUPR
View(table)
View(AUC)
View(adj_matrix)
result <- SINCERITIES_PLUS(DATA,noDIAG = 0,SIGN = 0,CV_nfolds = 10)
adj_matrix <- result$adj_matrix
View(adj_matrix)
sum(adj_matrix)
noDIAG = 0
SIGN = 0
CV_nfolds = 5
single_cell_data <- DATA$singleCELLdata
time <- DATA$time
numGENES <- DATA$numGENES
num_time_points <- length(time)
if(num_time_points<3){
stop('** The data must contain at least 3 time points **')
}
library(cvTools)
K <- CV_nfolds
indices <- list()
for(cv in 1:length(single_cell_data)){
N <-  dim(single_cell_data[[cv]])[1]
indices[[cv]] <- cvFolds(N,K = K)
}
error_CV <- array(0,dim = c(K,numGENES,100))
for(cross in 1:K){
data4test <- list()
data4train <- list()
for(cv in 1:length(single_cell_data)){
test <- indices[[cv]]$subsets[indices[[cv]]$which==cross]
train <- indices[[cv]]$subsets[indices[[cv]]$which!=cross]
data4test[[cv]] <- single_cell_data[[cv]][test,]
data4train[[cv]] <- single_cell_data[[cv]][train,]
}
#Distribution Distance
DISTANCE_matrix_train <- matrix(data=0,nrow=num_time_points-1,ncol = numGENES)
totalDATA <- data4train[[1]]
for(ti in 1:(num_time_points-1)){
totalDATA <- rbind(totalDATA,data4train[[ti+1]])
data_ti <- t(data4train[[ti]])
data_ti_plus1 <- t(data4train[[ti+1]])
for(gi in 1:numGENES){
p1 <- data_ti[gi,]
p2 <- data_ti_plus1[gi,]
test.stat <- ks.test(p1,p2)
DISTANCE_matrix_train[ti,gi] <- test.stat$statistic
}
}
#Normalization
deltaT <- replicate(dim(DISTANCE_matrix_train)[2],time[2:length(time)]-time[1:(length(time)-1)])
DISTANCE_matrix_train_normed <- DISTANCE_matrix_train/deltaT
X_matrix <- DISTANCE_matrix_train_normed[1:(num_time_points-2),]
#Distribution Distance Test
DISTANCE_matrix_test <- matrix(data=0,nrow=num_time_points-1,ncol = numGENES)
totalDATA <- data4test[[1]]
for(ti in 1:(num_time_points-1)){
totalDATA <- rbind(totalDATA,data4test[[ti+1]])
data_ti <- t(data4test[[ti]])
data_ti_plus1 <- t(data4test[[ti+1]])
for(gi in 1:numGENES){
p1 <- data_ti[gi,]
p2 <- data_ti_plus1[gi,]
test.stat <- ks.test(p1,p2)
DISTANCE_matrix_test[ti,gi] <- test.stat$statistic
}
}
#Normalization
deltaT <- replicate(dim(DISTANCE_matrix_test)[2],time[2:length(time)]-time[1:(length(time)-1)])
DISTANCE_matrix_test_normed <- DISTANCE_matrix_test/deltaT
X_matrix_test <- DISTANCE_matrix_test_normed[1:(num_time_points-2),]
#Generate Y and X_matrix for glmnet
alphas <- 0 #Ridge Regression
lambdas <- 10^seq(-2,2,length.out = 100)
for(gi in 1:numGENES){
Y_vector <- DISTANCE_matrix_train_normed[2:(num_time_points-1),gi]
if(noDIAG==1){
CV_results <- glmnet(X_matrix,Y_vector,alpha = alphas,exclude = gi,lambda = lambdas,
lower.limits = 0, upper.limits = Inf)
}else{
CV_results <- glmnet(X_matrix,Y_vector,alpha = alphas, lambda = lambdas,
lower.limits = 0, upper.limits = Inf)
}
Y_vector_test <- DISTANCE_matrix_test_normed[2:(num_time_points-1),gi]
for(lambdacount in 1:length(CV_results$lambda)){
beta_lambda <- as.matrix(CV_results$beta)[,lambdacount]
error_CV[cross,gi,lambdacount] <- sum((Y_vector_test - X_matrix_test%*%beta_lambda)^2)
}
}
}
mean_error_CV <- apply(error_CV,c(2,3),mean)
standard_error_mean <- apply(error_CV,c(2,3),sd)/sqrt(K)
View(mean_error_CV)
View(DISTANCE_matrix_test)
View(DISTANCE_matrix_test_normed)
AUROC
AUPR
View(table)
sum(adj_matrix)
View(adj_matrix)
View(table)
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=0,fileNAME='prediction4THP1',saveFile = TRUE)
View(table)
dim(df)
dim(table)
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=0,fileNAME='prediction4THP1',saveFile = TRUE)
View(table)
final_ranked_predictions <- dget("SINCERITIES functions/final_ranked_predictions.R")
table <- final_ranked_predictions(adj_matrix,DATA$genes,SIGN=0,fileNAME='prediction4THP1',saveFile = TRUE)
View(mean_error_CV)
